{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","sex","get","query","centuries","getAll","className","classnames","type","placeholder","onChange","event","newQueryParam","target","trim","toLocaleLowerCase","map","century","includes","filter","cent","length","Loader","PersonLink","person","slug","name","columnsName","PeopleTable","people","userSlug","useParams","sort","order","togglesort","column","newParam","toLowerCase","colum","searchMother","find","pers","motherName","serchFather","fatherName","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoad","setIsLoad","error","setError","useEffect","getPeople","peopleFromServer","catch","finally","visiblePeople","Math","ceil","a","b","localeCompare","reverse","getVisiblePeople","getLinkClass","isActive","classNames","Navbar","role","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"gSAQO,SAASA,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA+BhB,OAjBAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IAEvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAGIP,EAAUE,UAClB,C,mCC/BYY,EAA8B,SAAC,GAIrC,IAHLC,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEC,GAAI,CACFC,OAAQxB,EAAcsB,EAAcH,KAElCC,GAPN,aASGF,IAGN,EC9BYO,EAAgB,WAC3B,MAAwCJ,cAAxC,mBAAOC,EAAP,KAAqBI,EAArB,KAEMC,EAAML,EAAaM,IAAI,OACvBC,EAAQP,EAAaM,IAAI,UAAY,GACrCE,EAAYR,EAAaS,OAAO,cAAgB,GAYtD,OACE,sBAAKC,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEA,UAAWC,IAAW,CAAE,aAAcN,IACtCR,OAAQ,CAAEQ,IAAK,MAFjB,iBAOA,cAAC,EAAD,CACEK,UAAWC,IAAW,CAAE,YAAqB,MAARN,IACrCR,OAAQ,CAAEQ,IAAK,KAFjB,kBAOA,cAAC,EAAD,CACEK,UAAWC,IAAW,CAAE,YAAqB,MAARN,IACrCR,OAAQ,CAAEQ,IAAK,KAFjB,uBAQF,qBAAKK,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRE,KAAK,SACLF,UAAU,QACVG,YAAY,SACZzB,MAAOmB,EACPO,SA7CgB,SAACC,GACzB,IAAMC,EAAgBtC,EAAcsB,EAAc,CAChDO,MAAOQ,EAAME,OAAO7B,MAAM8B,OAAOC,qBAAuB,OAG1Df,EAAgBY,EACjB,IA0CO,sBAAMN,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SAhDc,CAAC,KAAM,KAAM,KAAM,KAAM,MAiDtBU,KAAI,SAACC,GAClB,OACE,cAAC,EAAD,CAEExB,OAAQ,CACNW,UAAWA,EAAUc,SAASD,GAC1Bb,EAAUe,QAAO,SAACC,GAAD,OAAUA,IAASH,CAAnB,IADV,sBAEHb,GAFG,CAEQa,KAErBX,UAAWC,IAAW,cAAe,CACnC,UAAWH,EAAUc,SAASD,KARlC,SAWGA,GAVIA,EAaV,MAGH,qBAAKX,UAAU,mBAAf,SACE,cAAC,EAAD,CACE,UAAQ,aACRA,UAAWC,IAAW,SAAU,aAAc,CAC5C,cAAeH,EAAUiB,OAAS,IAEpC5B,OAAQ,CAAEW,UAAW,MALvB,wBAcN,qBAAKE,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAU,0CAEVb,OAAQ,CAAEW,UAAW,KAAMD,MAAO,KAAMF,IAAK,MAH/C,mCAUP,EChHYqB,G,MAAS,kBACpB,qBAAKhB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCMTiB,EAA8B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5C,OACE,cAAC,IAAD,CACE3B,GAAE,kBAAa2B,EAAOC,MACtBnB,UAAWC,IAAW,CACpB,kBAAkC,MAAfiB,EAAOvB,MAH9B,SAMGuB,EAAOE,MAGb,ECTKC,EAAc,CAAC,OAAQ,MAAO,OAAQ,QAE/BC,EAA+B,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrCC,EAAaC,cAAbD,SAER,EAAuBnC,cAAhBC,EAAP,oBAEMoC,EAAOpC,EAAaM,IAAI,QACxB+B,EAAQrC,EAAaM,IAAI,SAE/B,SAASgC,EAAWC,GAClB,IAAIC,EAAW,CAAC,EAchB,OAZIJ,IAASG,EAAOE,eAAkBJ,IACpCG,EAAW,CAAEJ,KAAMG,EAAOE,cAAeJ,MAAO,OAG9CD,IAASG,EAAOE,eAAkBJ,IACpCG,EAAW,CAAEJ,KAAMG,EAAOE,cAAeJ,MAAO,SAG9CD,IAASG,EAAOE,eAAiBJ,IACnCG,EAAW,CAAEJ,KAAM,KAAMC,MAAO,OAG3BG,CACR,CAED,OACE,wBACE,UAAQ,cACR9B,UAAU,uDAFZ,UAIGuB,EAAOR,OAAS,EACf,gCACE,+BACGM,EAAYX,KAAI,SAACsB,GAChB,OACE,6BACE,uBAAMhC,UAAU,8BAAhB,UACGgC,EACD,cAAC,EAAD,CACE7C,OAAM,eACDyC,EAAWI,IAFlB,SAKE,sBAAMhC,UAAU,OAAhB,SACE,mBACEA,UAAWC,IAAW,MAAO,CAC3B,UAAWyB,IAASM,EAAMD,cAC1B,aACEL,IAASM,EAAMD,eAA2B,SAAVJ,EAClC,eACED,IAASM,EAAMD,eAA2B,SAAVJ,cAfrCK,EAuBZ,IAED,wCACA,6CAIJ,yFAEF,gCACGT,EAAOb,KAAI,SAACQ,GACX,IAAMe,EAAeV,EAAOW,MAC1B,SAACC,GAAD,OAAUA,EAAKf,OAASF,EAAOkB,UAA/B,IAEIC,EAAcd,EAAOW,MACzB,SAACC,GAAD,OAAUA,EAAKf,OAASF,EAAOoB,UAA/B,IAGF,OACE,qBACE,UAAQ,SAERtC,UAAWC,IAAW,CACpB,yBAA0BiB,EAAOC,OAASK,IAJ9C,UAOE,6BACE,cAAC,EAAD,CAAYN,OAAQA,MAEtB,6BAAKA,EAAOvB,MACZ,6BAAKuB,EAAOqB,OACZ,6BAAKrB,EAAOsB,OACZ,6BACGP,EACC,cAAC,EAAD,CAAYf,OAAQe,IAEpBf,EAAOkB,YAAc,MAGzB,6BACGC,EACC,cAAC,EAAD,CAAYnB,OAAQmB,IAEpBnB,EAAOoB,YAAc,QAtBpBpB,EAAOC,KA2BjB,QAIR,E,cCxHKsB,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCAA,IAAMC,EAAa,WAAO,IAAD,EAC9B,EAA4BC,mBAA0B,MAAtD,mBAAO7B,EAAP,KAAe8B,EAAf,KACA,EAA4BD,oBAAkB,GAA9C,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAA0BH,mBAAwB,MAAlD,mBAAOI,EAAP,KAAcC,EAAd,KACA,EAAuBpE,cAAhBC,EAAP,oBAEMK,EAAML,EAAaM,IAAI,OACvBC,EAAK,UAAGP,EAAaM,IAAI,gBAApB,aAAG,EAA2BY,OAAOC,oBAC1CX,EAAYR,EAAaS,OAAO,cAAgB,GAChD2B,EAAOpC,EAAaM,IAAI,QACxB+B,EAAQrC,EAAaM,IAAI,SAI/B8D,qBAAU,WACRH,GAAU,GDfP,WAAP,+BCgBII,GACGZ,MAAK,SAACa,GAAD,OAAsBP,EAAUO,EAAhC,IACLC,OAAM,WACLJ,EAAS,uBACV,IACAK,SAAQ,kBAAMP,GAAU,EAAhB,GACZ,GAAE,IAyDH,OACE,qCACE,oBAAIvD,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACGuB,GAAU,cAAC,EAAD,MAGb,qBAAKvB,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGsD,GAAU,cAAC,EAAD,IACVE,GACC,mBAAG,UAAQ,qBAAqBxD,UAAU,kBAA1C,SACGwD,IAGJjC,GAAU,cAAC,EAAD,CAAaA,OAzEX,WACvB,IAAKA,EACH,MAAO,GAGT,IAAIwC,EAAa,YAAOxC,GA2CxB,OAzCI5B,IACFoE,EAAgBA,EAAclD,QAAO,SAACK,GAAD,OAAYA,EAAOvB,MAAQA,CAA3B,KAGnCE,IACFkE,EAAgBA,EAAclD,QAAO,SAACK,GAAD,eAAYA,EAC9CE,KAAKX,oBAAoBG,SAASf,KADY,UAE5CqB,EAAOkB,kBAFqC,aAE5C,EAAmB3B,oBAAoBG,SAASf,MAFJ,UAG5CqB,EAAOoB,kBAHqC,aAG5C,EAAmB7B,oBAAoBG,SAASf,GAHhB,KAMnCC,EAAUiB,OAAS,IACrBgD,EAAgBA,EAAclD,QAAO,SAACK,GAAD,cAAYpB,QAAZ,IAAYA,OAAZ,EAAYA,EAC7Cc,SAASoD,KAAKC,KAAK/C,EAAOqB,KAAO,KAAKlE,WADL,KAInCqD,GACFqC,EAAcrC,MAAK,SAACwC,EAAGC,GACrB,OAAQzC,GACN,IAAK,OACH,OAAOwC,EAAE9C,KAAKgD,cAAcD,EAAE/C,MAEhC,IAAK,MACH,OAAO8C,EAAEvE,IAAIyE,cAAcD,EAAExE,KAE/B,IAAK,OACH,OAAQuE,EAAE3B,KAAO4B,EAAE5B,KAErB,IAAK,OACH,OAAQ2B,EAAE1B,KAAO2B,EAAE3B,KAErB,QACE,OAAO,EAEZ,IAGCb,GACFoC,EAAcM,UAGTN,CACR,CAwB2CO,MAC9BhB,IAAWE,IAAUjC,GACrB,mBAAG,UAAQ,kBAAX,mCAQf,ECjHKgD,EAAe,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SACtB,OAAOC,IAAW,cAAe,CAAE,8BAA+BD,GACnE,EAEYE,EAAS,WACpB,OACE,qBACE,UAAQ,MACR1E,UAAU,iCACV2E,KAAK,aACL,aAAW,kBAJb,SAME,qBAAK3E,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAASA,UAAWuE,EAAchF,GAAG,IAArC,kBAIA,cAAC,IAAD,CAASS,UAAWuE,EAAchF,GAAG,UAArC,0BAOT,ECvBYqF,G,MAAM,kBACjB,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IACA,sBAAM5E,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6E,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUvF,GAAG,IAAIwF,SAAO,MACrD,cAAC,IAAD,CAAOF,KAAK,IAAIC,QAAS,oBAAI9E,UAAU,QAAd,yBACzB,eAAC,IAAD,CAAO6E,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOG,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,SAEnC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,oBAAI9E,UAAU,QAAd,uCAZhB,GCGnBiF,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.8d1c7c59.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classnames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newQueryParam = getSearchWith(searchParams, {\n      query: event.target.value.trim().toLocaleLowerCase() || null,\n    });\n\n    setSearchParams(newQueryParam);\n  };\n\n  const centuriesItem = ['16', '17', '18', '19', '20'];\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classnames({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classnames({ 'is-active': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classnames({ 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesItem.map((century) => {\n              return (\n                <SearchLink\n                  key={century}\n                  params={{\n                    centuries: centuries.includes(century)\n                      ? centuries.filter((cent) => cent !== century)\n                      : [...centuries, century],\n                  }}\n                  className={classnames('button mr-1', {\n                    'is-info': centuries.includes(century),\n                  })}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classnames('button', 'is-success', {\n                'is-outlined': centuries.length > 0,\n              })}\n              params={{ centuries: null }}\n              // to=\"#/people\"\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          // to=\"#/people\"\n          params={{ centuries: null, query: null, sex: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classnames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={classnames({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classnames from 'classnames';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nconst columnsName = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { userSlug } = useParams();\n\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  function togglesort(column: string) {\n    let newParam = {};\n\n    if (sort !== column.toLowerCase() && !order) {\n      newParam = { sort: column.toLowerCase(), order: null };\n    }\n\n    if (sort === column.toLowerCase() && !order) {\n      newParam = { sort: column.toLowerCase(), order: 'desc' };\n    }\n\n    if (sort === column.toLowerCase() && order) {\n      newParam = { sort: null, order: null };\n    }\n\n    return newParam;\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      {people.length > 0 ? (\n        <thead>\n          <tr>\n            {columnsName.map((colum) => {\n              return (\n                <th key={colum}>\n                  <span className=\"is-flex is-flex-wrap-nowrap\">\n                    {colum}\n                    <SearchLink\n                      params={{\n                        ...togglesort(colum),\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classnames('fas', {\n                            'fa-sort': sort !== colum.toLowerCase(),\n                            'fa-sort-up':\n                              sort === colum.toLowerCase() && order !== 'desc',\n                            'fa-sort-down':\n                              sort === colum.toLowerCase() && order === 'desc',\n                          })}\n                        />\n                      </span>\n                    </SearchLink>\n                  </span>\n                </th>\n              );\n            })}\n\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n      ) : (\n        <p>There are no people matching the current search criteria</p>\n      )}\n      <tbody>\n        {people.map((person: Person) => {\n          const searchMother = people.find(\n            (pers) => pers.name === person.motherName,\n          );\n          const serchFather = people.find(\n            (pers) => pers.name === person.fatherName,\n          );\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={classnames({\n                'has-background-warning': person.slug === userSlug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n              <td>{person.sex}</td>\n              <td>{person.born}</td>\n              <td>{person.died}</td>\n              <td>\n                {searchMother ? (\n                  <PersonLink person={searchMother} />\n                ) : (\n                  person.motherName || '-'\n                )}\n              </td>\n              <td>\n                {serchFather ? (\n                  <PersonLink person={serchFather} />\n                ) : (\n                  person.fatherName || '-'\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\n\nimport { Person } from '../types/Person';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isLoad, setIsLoad] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query')?.trim().toLocaleLowerCase();\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  // console.log(order);\n\n  useEffect(() => {\n    setIsLoad(true);\n    getPeople()\n      .then((peopleFromServer) => setPeople(peopleFromServer))\n      .catch(() => {\n        setError('Something went wrong');\n      })\n      .finally(() => setIsLoad(false));\n  }, []);\n\n  const getVisiblePeople = () => {\n    if (!people) {\n      return [];\n    }\n\n    let visiblePeople = [...people];\n\n    if (sex) {\n      visiblePeople = visiblePeople.filter((person) => person.sex === sex);\n    }\n\n    if (query) {\n      visiblePeople = visiblePeople.filter((person) => person\n        .name.toLocaleLowerCase().includes(query)\n        || person.motherName?.toLocaleLowerCase().includes(query)\n        || person.fatherName?.toLocaleLowerCase().includes(query));\n    }\n\n    if (centuries.length > 0) {\n      visiblePeople = visiblePeople.filter((person) => centuries\n        ?.includes(Math.ceil(person.born / 100).toString()));\n    }\n\n    if (sort) {\n      visiblePeople.sort((a, b) => {\n        switch (sort) {\n          case 'name':\n            return a.name.localeCompare(b.name);\n\n          case 'sex':\n            return a.sex.localeCompare(b.sex);\n\n          case 'born':\n            return (a.born - b.born);\n\n          case 'died':\n            return (a.died - b.died);\n\n          default:\n            return 0;\n        }\n      });\n    }\n\n    if (order) {\n      visiblePeople.reverse();\n    }\n\n    return visiblePeople;\n  };\n\n  // const visiblePeople = people\n  //   ? people.filter((person) => (sex ? person.sex === sex : true))\n  //   : [];\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoad && <Loader />}\n              {error && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {error}\n                </p>\n              )}\n              {people && <PeopleTable people={getVisiblePeople()} />}\n              {!isLoad && !error && !people && (\n                <p data-cy=\"noPeopleMessage\">no people</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\n// Something went wrong\n\n// There are no people on the server\n\n// There are no people matching the current search criteria\n//\n// <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n\n// <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n\n// <p>There are no people matching the current search criteria</p>\n","import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', { 'has-background-grey-lighter': isActive });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={getLinkClass} to=\"/\">\n            Home\n          </NavLink>\n\n          <NavLink className={getLinkClass} to=\"/people\">\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":userSlug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n\n// export const App = () => {\n//   return (\n//     <div data-cy=\"app\">\n//       <Navbar />\n\n//       <div className=\"section\">\n//         <div className=\"container\">\n//           <h1 className=\"title\">Home Page</h1>\n//           <h1 className=\"title\">Page not found</h1>\n//           <PeoplePage />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}